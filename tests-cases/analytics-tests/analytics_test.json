{
	"info": {
		"_postman_id": "02313775-7ed0-4a9b-b77c-e3f74423432f",
		"name": "WSO2 API Manager 3.2.0 - Analytics Test Copy",
		"description": "This document specifies a **RESTful API** for WSO2 **API Manager - Publisher REST API** .\nIt is written with [swagger 2.0](http://swagger.io/).\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8020362",
		"_collection_link": "https://red-spaceship-419376.postman.co/workspace/wk~f3842656-88e7-444c-8aa6-2c3427460bd4/collection/8020362-02313775-7ed0-4a9b-b77c-e3f74423432f?action=share&creator=8020362&source=collection_link"
	},
	"item": [
		{
			"name": "Check Existency",
			"item": [
				{
					"name": "Register DCR Application for Super Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"DCR application creation for super admin user\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// DCR response JSON",
									"var dcrResponseJson = pm.response.json();",
									"",
									"var dcrAppClientId = dcrResponseJson.clientId;",
									"var dcrAppClientSecret = dcrResponseJson.clientSecret;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"dcr_app_client_id\", dcrAppClientId);",
									"pm.environment.set(\"dcr_app_client_secret\", dcrAppClientSecret);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{super_admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{super_admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"callbackUrl\": \"www.google.lk\",\n\t\"clientName\": \"rest_api_publisher\",\n\t\"owner\": \"admin\",\n\t\"grantType\": \"client_credentials password refresh_token\",\n\t\"saasApp\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{dcr_path}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{dcr_path}}"
						}
					},
					"response": []
				},
				{
					"name": "GET Access Token for Super Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"DCR application token generation for super admin user\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// DCR response JSON",
									"var dcrResponseJson = pm.response.json();",
									"",
									"var dcrAppAccessToken = dcrResponseJson.access_token;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"access-token\", dcrAppAccessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{dcr_app_client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{dcr_app_client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{super_admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{super_admin_password}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "apim:api_view apim:api_publish apim:api_create apim:subscribe apim:subscription_view apim:document_create apim:comment_write apim:admin apim:tier_manage apim:scope_manage apim:admin_operations apim:shared_scope_manage apim:mediation_policy_create apim:api_import_export apim:mediation_policy_view apim:app_manage apim:sub_manage apim:admin apim:tier_view",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{gateway_token_path}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{gateway_token_path}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "APIs",
			"item": [
				{
					"name": "Create a new API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"apiId\", response.id);",
									"pm.test(\"Successfully created the API\", () => {",
									"  pm.response.to.have.status(\"Created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PizzaShackAPI\",\n  \"description\": \"This is a simple API for Pizza Shack online pizza delivery store.\",\n  \"context\": \"/pizzashack\",\n  \"version\": \"1.0.0\",\n  \"transport\": [\n    \"http\",\n    \"https\"\n  ],\n  \"tags\": [\n    \"pizza\"\n  ],\n  \"policies\": [\n    \"Unlimited\"\n  ],\n  \"securityScheme\": [\n    \"oauth2\"\n  ],\n  \"visibility\": \"PUBLIC\",\n  \"gatewayEnvironments\": [\n    \"Production and Sandbox\"\n  ],\n  \"businessInformation\": {\n    \"businessOwner\": \"Jane Roe\",\n    \"businessOwnerEmail\": \"marketing@pizzashack.com\",\n    \"technicalOwner\": \"John Doe\",\n    \"technicalOwnerEmail\": \"architecture@pizzashack.com\"\n  },\n  \"endpointConfig\": {\n    \"endpoint_type\": \"http\",\n    \"sandbox_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    },\n    \"production_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    }\n  },\n  \"operations\": [\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"DELETE\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"PUT\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/menu\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order\",\n      \"verb\": \"POST\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{publisher_base_path}}/apis",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{publisher_base_path}}",
							"path": [
								"apis"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change API Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);",
									"console.log(response.lifecycleState);",
									"pm.test(\"Publishing API\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{publisher_base_path}}/apis/change-lifecycle?action={{action}}&lifecycleChecklist={{lifecycleChecklist}}&apiId={{apiId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"change-lifecycle"
							],
							"query": [
								{
									"key": "action",
									"value": "{{action}}"
								},
								{
									"key": "lifecycleChecklist",
									"value": "{{lifecycleChecklist}}"
								},
								{
									"key": "apiId",
									"value": "{{apiId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Normal Invocation",
			"item": [
				{
					"name": "pre-invoke",
					"item": [
						{
							"name": "Add Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);",
											"pm.collectionVariables.set(\"applicationID\", response.applicationId);",
											"pm.test(\"Application Creation\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"CalculatorApp\",\n  \"throttlingPolicy\": \"Unlimited\",\n  \"description\": \"Sample calculator application\",\n  \"tokenType\": \"JWT\",\n  \"groups\": [],\n  \"attributes\": {},\n  \"subscriptionScopes\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/applications",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portal_port}}{{devportal_base_path}}",
									"path": [
										"applications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add API Subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Adding Subscription\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"var response = JSON.parse(responseBody);",
											"pm.collectionVariables.set(\"subscriptionId\", response.subscriptionId);",
											"pm.collectionVariables.set(\"applicationId\", response.applicationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true,
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"applicationId\": \"{{applicationID}}\",\n\"apiId\": \"{{apiId}}\",\n\"throttlingPolicy\": \"Unlimited\",\n\"requestedThrottlingPolicy\": \"Unlimited\",\n\"status\": \"UNBLOCKED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/subscriptions",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portal_port}}{{devportal_base_path}}",
									"path": [
										"subscriptions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Keymanagers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);",
											"for (var i = 0; i < response.list.length; i++) {",
											"    var keymanagers = response.list[i];",
											"    if (keymanagers != null) {",
											"         console.info(keymanagers.name);",
											"         if (keymanagers.name == 'Resident Key Manager') {",
											"               pm.collectionVariables.set(\"keymanagerID\", keymanagers.id);",
											"         }",
											"    } ",
											"}",
											"pm.test(\"Getting Keymanagers\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/key-managers",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portal_port}}{{devportal_base_path}}",
									"path": [
										"key-managers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Oauth Keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);",
											"pm.collectionVariables.set(\"keyMappingId\", response.keyMappingId);",
											"pm.collectionVariables.set(\"consumerSecret\", response.consumerSecret);",
											"pm.test(\"Generating Oauth Keys\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"keyType\": \"PRODUCTION\",\n  \"grantTypesToBeSupported\": [\n    \"refresh_token\",\n    \"urn:ietf:params:oauth:grant-type:saml2-bearer\",\n    \"password\",\n    \"client_credentials\",\n    \"iwa:ntlm\",\n    \"urn:ietf:params:oauth:grant-type:device_code\",\n    \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n  ],\n  \"callbackUrl\": \"\",\n  \"additionalProperties\": {\n    \"application_access_token_expiry_time\": \"N/A\",\n    \"user_access_token_expiry_time\": \"N/A\",\n    \"refresh_token_expiry_time\": \"N/A\",\n    \"id_token_expiry_time\": \"N/A\"\n  },\n  \"keyManager\": \"{{keymanagerID}}\",\n  \"validityTime\": 3600,\n  \"scopes\": [\n    \"default\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/applications/{{applicationID}}/generate-keys",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portal_port}}{{devportal_base_path}}",
									"path": [
										"applications",
										"{{applicationID}}",
										"generate-keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get AccessToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = JSON.parse(responseBody);",
											"pm.test(\"Generating accessToken\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.collectionVariables.set(\"API-accessToken\", response.accessToken);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"consumerSecret\": \"{{consumerSecret}}\",\n  \"validityPeriod\": 3600,\n  \"revokeToken\": null,\n  \"scopes\": [],\n  \"additionalProperties\": {\n    \"id_token_expiry_time\": 3600,\n    \"application_access_token_expiry_time\": 3600,\n    \"user_access_token_expiry_time\": 3600,\n    \"refresh_token_expiry_time\": 86400\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/applications/{{applicationID}}/oauth-keys/{{keyMappingId}}/generate-token",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portal_port}}{{devportal_base_path}}",
									"path": [
										"applications",
										"{{applicationID}}",
										"oauth-keys",
										"{{keyMappingId}}",
										"generate-token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invocation",
					"item": [
						{
							"name": "PizzaGate Menu Invocation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const date = new Date();",
											"pm.collectionVariables.set(\"time1\", date.getTime());",
											"var val = date.setSeconds(7);",
											"pm.collectionVariables.set(\"time2\", val);",
											"pm.test(\"API invocation\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{API-accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{gateway_host}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{gateway_port}}/pizzashack/1.0.0/menu",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{gateway_port}}",
									"path": [
										"pizzashack",
										"1.0.0",
										"menu"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fault PizzaGate Menu Invocation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const date = new Date();",
											"pm.collectionVariables.set(\"timeL1\", date.getTime());",
											"var val = date.setSeconds(3);",
											"pm.collectionVariables.set(\"timeL2\", val);",
											"pm.test(\"Faulty Invocation\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ4NXQiOiJNell4TW1Ga09HWXdNV0kwWldObU5EY3hOR1l3WW1NNFpUQTNNV0kyTkRBelpHUXpOR00wWkdSbE5qSmtPREZrWkRS",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{gateway_host}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{gateway_port}}/pizzashack/1.0.0/menu",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{gateway_port}}",
									"path": [
										"pizzashack",
										"1.0.0",
										"menu"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Test Tables",
			"item": [
				{
					"name": "Query App usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Checking API usage summery\", () => {",
									"  var response = JSON.parse(responseBody);",
									"  var record = response.records;",
									"",
									"  var value;",
									"  if (!record.length) {",
									"      value = 'empty';",
									"  } else {",
									"      value = 'Published array';",
									"  }",
									"   pm.expect(value).to.eql('Published array');",
									"  ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{analytics_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"appName\" : \"APIM_ACCESS_SUMMARY\", \"query\" : \"from ApiUserPerAppAgg within {{time2}}L, {{time1}}L per \\\"seconds\\\" select *\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{analytics_port}}/stores/query",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{analytics_port}}",
							"path": [
								"stores",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "Geo Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Checking API Geo Location Stats\", () => {",
									"  var response = JSON.parse(responseBody);",
									"  var record = response.records;",
									"",
									"  var value;",
									"  if (!record.length) {",
									"      value = 'empty';",
									"  } else {",
									"      value = 'Published Geo location';",
									"  }",
									"   pm.expect(value).to.eql('Published Geo location');",
									"  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{analytics_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"appName\" : \"APIM_ACCESS_SUMMARY\", \"query\" : \"from GeoLocationAgg within {{time2}}L, {{time1}}L per \\\"seconds\\\" select *\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{analytics_port}}/stores/query",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{analytics_port}}",
							"path": [
								"stores",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "Faulty summery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Checking API Faulty Invocation summery Stats\", () => {",
									"  var response = JSON.parse(responseBody);",
									"  var record = response.records;",
									"",
									"  var value;",
									"  if (!record.length) {",
									"      value = 'empty';",
									"  } else {",
									"      value = 'Published Faulty Invocations';",
									"  }",
									"   pm.expect(value).to.eql('Published Faulty Invocations');",
									"  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{analytics_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"appName\" : \"APIM_ERROR_SUMMARY\", \"query\" : \"from ApiErrorAnalysisAgg within {{timeL2}}L, {{timeL1}}L per \\\"seconds\\\" select *\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{analytics_port}}/stores/query",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{analytics_port}}",
							"path": [
								"stores",
								"query"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Clean Data",
			"item": [
				{
					"name": "Get All Subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);",
									"for (var i = 0; i < response.list.length; i++) {",
									"    var subscription = response.list[i];",
									"    if (subscription != null) {",
									"         console.info(subscription.apiInfo.name);",
									"         if (subscription.apiInfo.name == 'PizzaShackAPI') {",
									"               pm.collectionVariables.set(\"subscriptionID\", subscription.subscriptionId);",
									"         }",
									"    }",
									"}",
									"pm.test(\"Getting Subscriptions\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/subscriptions?apiId={{apiId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{devportal_base_path}}",
							"path": [
								"subscriptions"
							],
							"query": [
								{
									"key": "apiId",
									"value": "{{apiId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Subscription Removal\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/subscriptions/{{subscriptionID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{devportal_base_path}}",
							"path": [
								"subscriptions",
								"{{subscriptionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API Removal\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{publisher_base_path}}/apis/{{apiId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{apiId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Application Removal\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/applications/{{applicationID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{applicationID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Throttling",
			"item": [
				{
					"name": "Add Subscription Throttling Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Application throttling policy creation\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Subscription throttling policy creation response JSON",
									"var subscriptionThrottlingPolicyCreationResponseJson = pm.response.json();",
									"",
									"var policyId = subscriptionThrottlingPolicyCreationResponseJson.policyId;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"subscription_throttling_policy_id\", policyId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"policyName\": \"5PerMin\",\n  \"description\": \"Allows 5 request per minute\",\n  \"defaultLimit\": {\n    \"type\": \"REQUESTCOUNTLIMIT\",\n    \"requestCount\": {\n      \"requestCount\": \"5\",\n      \"timeUnit\": \"min\",\n      \"unitTime\": \"1\"\n    }\n  },\n  \"rateLimitCount\": 0,\n  \"rateLimitTimeUnit\": \"sec\",\n  \"billingPlan\": \"FREE\",\n  \"stopOnQuotaReach\": true,\n  \"customAttributes\": [],\n  \"graphQLMaxComplexity\": 0,\n  \"graphQLMaxDepth\": 0,\n  \"monetization\": {\n    \"monetizationPlan\": \"FIXEDRATE\",\n    \"properties\": {\n      \"fixedPrice\": \"\",\n      \"pricePerRequest\": \"\",\n      \"currencyType\": \"\",\n      \"billingCycle\": \"week\"\n    }\n  },\n  \"permissions\": {\n    \"permissionType\": \"ALLOW\",\n    \"roles\": [\n      \"Internal/everyone\"\n    ]\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{admin_port}}{{admin_base_path}}/throttling/policies/subscription",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{admin_port}}{{admin_base_path}}",
							"path": [
								"throttling",
								"policies",
								"subscription"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API with Created Throttling Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API creation\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// API creation response JSON",
									"var apiCreationResponseJson = pm.response.json();",
									"",
									"var apiId = apiCreationResponseJson.id;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"api_id\", apiId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PizzaShackAPI\",\n  \"description\": \"This is a simple API for Pizza Shack online pizza delivery store.\",\n  \"context\": \"/pizzashack\",\n  \"version\": \"1.0.0\",\n  \"transport\": [\n    \"http\",\n    \"https\"\n  ],\n  \"tags\": [\n    \"pizza\"\n  ],\n  \"policies\": [\n    \"5PerMin\"\n  ],\n  \"securityScheme\": [\n    \"oauth2\"\n  ],\n  \"visibility\": \"PUBLIC\",\n  \"gatewayEnvironments\": [\n    \"Production and Sandbox\"\n  ],\n  \"businessInformation\": {\n    \"businessOwner\": \"Jane Roe\",\n    \"businessOwnerEmail\": \"marketing@pizzashack.com\",\n    \"technicalOwner\": \"John Doe\",\n    \"technicalOwnerEmail\": \"architecture@pizzashack.com\"\n  },\n  \"endpointConfig\": {\n    \"endpoint_type\": \"http\",\n    \"sandbox_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    },\n    \"production_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    }\n  },\n  \"operations\": [\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"DELETE\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"PUT\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/menu\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order\",\n      \"verb\": \"POST\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{publisher_base_path}}/apis?openAPIVersion=v3",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{publisher_base_path}}",
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "openAPIVersion",
									"value": "v3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Publish the API\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{publisher_base_path}}/apis/change-lifecycle?action=Publish&apiId={{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"change-lifecycle"
							],
							"query": [
								{
									"key": "action",
									"value": "Publish"
								},
								{
									"key": "apiId",
									"value": "{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Application creation\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Application creation response JSON",
									"var appCreationResponseJson = pm.response.json();",
									"",
									"var applicationId = appCreationResponseJson.applicationId;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"application_id\", applicationId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PizzaShackApp\",\n  \"throttlingPolicy\": \"Unlimited\",\n  \"description\": \"\",\n  \"tokenType\": \"JWT\",\n  \"groups\": null,\n  \"attributes\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/applications",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{devportal_base_path}}",
							"path": [
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Subscription with Created Throttling Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Subscription to the API\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"applicationId\": \"{{application_id}}\",\n  \"apiId\": \"{{api_id}}\",\n  \"throttlingPolicy\": \"5PerMin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/subscriptions",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{devportal_base_path}}",
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Key Manager for Key Generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve keymanager to generate keys\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Keymanager retrieval response JSON",
									"var keymanagerArrayJsonResponse = pm.response.json();",
									"",
									"var keymanagerId = keymanagerArrayJsonResponse.list[0].id;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"keymanager_id\", keymanagerId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/key-managers",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{devportal_base_path}}",
							"path": [
								"key-managers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Keys for Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Generate keys for the application\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Key generation response JSON",
									"var keyGenerationResponseJson = pm.response.json();",
									"",
									"var keyMappingId = keyGenerationResponseJson.keyMappingId;",
									"var appConsumerSecret = keyGenerationResponseJson.consumerSecret;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"key_mapping_id\", keyMappingId);",
									"pm.environment.set(\"app_consumer_secret\", appConsumerSecret);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"keyType\": \"PRODUCTION\",\n  \"grantTypesToBeSupported\": [\n    \"refresh_token\",\n    \"urn:ietf:params:oauth:grant-type:saml2-bearer\",\n    \"password\",\n    \"client_credentials\",\n    \"iwa:ntlm\",\n    \"urn:ietf:params:oauth:grant-type:device_code\",\n    \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n  ],\n  \"callbackUrl\": \"\",\n  \"additionalProperties\": {\n    \"application_access_token_expiry_time\": \"N/A\",\n    \"user_access_token_expiry_time\": \"N/A\",\n    \"refresh_token_expiry_time\": \"N/A\",\n    \"id_token_expiry_time\": \"N/A\"\n  },\n  \"keyManager\": \"{{keymanager_id}}\",\n  \"validityTime\": 3600,\n  \"scopes\": [\n    \"default\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/applications/{{application_id}}/generate-keys",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{application_id}}",
								"generate-keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Access Token for Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Generate access token to invoke APIs\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Access token response JSON",
									"var accessTokenResponseJson = pm.response.json();",
									"",
									"var appAccessToken = accessTokenResponseJson.accessToken;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"app_access_token\", appAccessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"consumerSecret\": \"{{app_consumer_secret}}\",\n  \"validityPeriod\": 3600,\n  \"revokeToken\": null,\n  \"scopes\": [],\n  \"additionalProperties\": {\n    \"id_token_expiry_time\": 3600,\n    \"application_access_token_expiry_time\": 3600,\n    \"user_access_token_expiry_time\": 3600,\n    \"refresh_token_expiry_time\": 86400\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/applications/{{application_id}}/oauth-keys/{{key_mapping_id}}/generate-token",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{application_id}}",
								"oauth-keys",
								"{{key_mapping_id}}",
								"generate-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoke API to Test Subscription-level Throttling",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check the subscriptionRetryCounter",
									"pm.variables.get(\"subscriptionRetryCounter\") === undefined ? pm.variables.set('subscriptionRetryCounter', pm.variables.get(\"retryCount\")) : null",
									"retryCount = pm.variables.get(\"subscriptionRetryCounter\");",
									"",
									"var throttledOut = false;",
									"if (pm.response.code == 429) {",
									"    throttledOut = true;",
									"}",
									"",
									"// Assert when throttled out",
									"if (throttledOut) {",
									"    pm.test(\"API request is throttled\", function () {",
									"        const date = new Date();",
									"        pm.collectionVariables.set(\"t1\", date.getTime());",
									"        date.setSeconds(5);",
									"        pm.collectionVariables.set(\"t2\", date.getTime());",
									"        pm.response.to.have.status(429);",
									"    });",
									"}",
									"",
									"if (retryCount > 1 && !throttledOut) {",
									"    setTimeout(function(){}, 800);",
									"    pm.variables.set('subscriptionRetryCounter', --retryCount)",
									"    postman.setNextRequest(pm.info.requestName);",
									"} else if (retryCount == 1 && !throttledOut) {",
									"    pm.test(\"API request is not throttled\", function () {",
									"        pm.response.to.have.status(429);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"retryCount\", 15);",
									"setTimeout(function(){}, 800);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{gateway_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{gateway_port}}/pizzashack/1.0.0/menu",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{gateway_port}}",
							"path": [
								"pizzashack",
								"1.0.0",
								"menu"
							]
						}
					},
					"response": []
				},
				{
					"name": "Throttling Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Checking API throttling stats\", () => {",
									"  var response = JSON.parse(responseBody);",
									"  var record = response.records;",
									"",
									"  var value;",
									"  if (!record.length) {",
									"      value = 'empty';",
									"  } else {",
									"      value = 'Published array';",
									"  }",
									"   pm.expect(value).to.eql('Published array');",
									"  ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"retryCount\", 15);",
									"setTimeout(function(){}, 800);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{analytics_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"appName\" : \"APIM_THROTTLED_OUT_SUMMARY\", \"query\" : \"from ApiThrottledOutAgg within {{t2}}L, {{t1}}L per \\\"seconds\\\" select *\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{analytics_port}}/stores/query",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{analytics_port}}",
							"path": [
								"stores",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);",
									"for (var i = 0; i < response.list.length; i++) {",
									"    var subscription = response.list[i];",
									"    if (subscription != null) {",
									"         console.info(subscription.apiInfo.name);",
									"         if (subscription.apiInfo.name == 'PizzaShackAPI') {",
									"               pm.collectionVariables.set(\"subscriptionID\", subscription.subscriptionId);",
									"         }",
									"    } ",
									"}",
									"pm.test(\"Get All subscriptions\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/subscriptions?apiId={{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{devportal_base_path}}",
							"path": [
								"subscriptions"
							],
							"query": [
								{
									"key": "apiId",
									"value": "{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Subscription Removal\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/subscriptions/{{subscriptionID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{devportal_base_path}}",
							"path": [
								"subscriptions",
								"{{subscriptionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Application Removal\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{devportal_base_path}}/applications/{{application_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Subscription Throttling Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Subscription policy\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{admin_base_path}}/throttling/policies/subscription/{{subscription_throttling_policy_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{admin_base_path}}",
							"path": [
								"throttling",
								"policies",
								"subscription",
								"{{subscription_throttling_policy_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API Removal\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portal_port}}{{publisher_base_path}}/apis/{{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portal_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "access-token",
			"value": "42607a35-21c0-340c-8a34-871b7c1e8518",
			"type": "string"
		},
		{
			"key": "apiId",
			"value": "",
			"type": "string"
		},
		{
			"key": "resourcePath",
			"value": "checkPhoneNumber",
			"type": "string"
		},
		{
			"key": "verb",
			"value": "post",
			"type": "string"
		},
		{
			"key": "sequenceType",
			"value": "in",
			"type": "string"
		},
		{
			"key": "resourcePolicyId",
			"value": "948d23e0-0927-4652-8373-eb8c01e7f7c4",
			"type": "string"
		},
		{
			"key": "newVersion",
			"value": "2.0",
			"type": "string"
		},
		{
			"key": "isDefaultVersion",
			"value": "false",
			"type": "string"
		},
		{
			"key": "lifecycleChecklist",
			"value": "Deprecate%20old%20versions%20after%20publishing%20the%20API%3Atrue,Requires%20re-subscription%20when%20publishing%20the%20API%3Afalse",
			"type": "string"
		},
		{
			"key": "action",
			"value": "Publish",
			"type": "string"
		},
		{
			"key": "endpointURL",
			"value": "https://petstore.swagger.io",
			"type": "string"
		},
		{
			"key": "api-name",
			"value": "PizzaShackAPI",
			"type": "string"
		},
		{
			"key": "basepath",
			"value": "https://localhost:9443/api/am/publisher/v1.2",
			"type": "string"
		},
		{
			"key": "documentId",
			"value": "f816c01a-afc7-49bd-92db-661ab99bab32",
			"type": "string"
		},
		{
			"key": "apiDocName",
			"value": "CalculatorDoc",
			"type": "string"
		},
		{
			"key": "mediationPolicyId",
			"value": "44791bfe-080e-46ff-bf32-18103f729461",
			"type": "string"
		},
		{
			"key": "externalStoreIds",
			"value": "Store123",
			"type": "string"
		},
		{
			"key": "exportAPIProvider",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "exportAPIVersion",
			"value": "1.0",
			"type": "string"
		},
		{
			"key": "exportAPIName",
			"value": "PizzaShackAPI",
			"type": "string"
		},
		{
			"key": "exportAPIFormat",
			"value": "YAML",
			"type": "string"
		},
		{
			"key": "exportAPIId",
			"value": "e0824883-3e86-403a-aec1-22bbc454eb7c",
			"type": "string"
		},
		{
			"key": "subscriptionId",
			"value": "58a7d387-d0a6-4042-90b2-677b51d4ddd0",
			"type": "string"
		},
		{
			"key": "blockState",
			"value": "PROD_ONLY_BLOCKED",
			"type": "string"
		},
		{
			"key": "policyLevel",
			"value": "api",
			"type": "string"
		},
		{
			"key": "policyName",
			"value": "10KPerMin",
			"type": "string"
		},
		{
			"key": "alias",
			"value": "test",
			"type": "string"
		},
		{
			"key": "endpoint",
			"value": "https://petstore.swagger.io",
			"type": "string"
		},
		{
			"key": "searchTerm",
			"value": "PizzaShackAPI",
			"type": "string"
		},
		{
			"key": "apiProductId",
			"value": "1cdedb2d-d062-4151-8b88-3c361ae7fe89",
			"type": "string"
		},
		{
			"key": "productDocumentId",
			"value": "19f2eaf5-a3e8-4f25-af52-adc92bb5c62c",
			"type": "string"
		},
		{
			"key": "roleId",
			"value": "SW50ZXJuYWwvcHVibGlzaGVyCQ",
			"type": "string"
		},
		{
			"key": "tenantId",
			"value": "wso2.com",
			"type": "string"
		},
		{
			"key": "scopeId",
			"value": "50163120-db4a-402e-a326-c92432836cc5",
			"type": "string"
		},
		{
			"key": "scopeName",
			"value": "VGVzdFNjb3Bl",
			"type": "string"
		},
		{
			"key": "sampleRestAPIPayload",
			"value": "{\n  \"name\": \"PizzaShackAPI\",\n  \"description\": \"This is a simple API for Pizza Shack online pizza delivery store.\",\n  \"context\": \"pizza\",\n  \"version\": \"1.0.0\",\n  \"provider\": \"admin\",\n  \"lifeCycleStatus\": \"CREATED\",\n  \"responseCachingEnabled\": false,\n  \"destinationStatsEnabled\": \"Disabled\",\n  \"hasThumbnail\": false,\n  \"isDefaultVersion\": false,\n  \"enableSchemaValidation\": false,\n  \"enableStore\": true,\n  \"type\": \"HTTP\",\n  \"transport\": [\n    \"http\",\n    \"https\"\n  ],\n  \"tags\": [\n    \"substract\",\n    \"add\"\n  ],\n  \"policies\": [\n    \"Unlimited\"\n  ],\n  \"apiThrottlingPolicy\": \"Unlimited\",\n  \"securityScheme\": [\"oauth2\"],\n  \"maxTps\": {\n    \"production\": 1000,\n    \"sandbox\": 1000\n  },\n  \"visibility\": \"PUBLIC\",\n  \"visibleRoles\": [],\n  \"visibleTenants\": [],\n  \"gatewayEnvironments\": [\n    \"Production and Sandbox\"\n  ],\n  \"subscriptionAvailability\": \"CURRENT_TENANT\",\n  \"additionalProperties\": {\n    \"additionalProp1\": \"additionalPropVal1\"\n  },\n  \"accessControl\": \"NONE\",\n  \"businessInformation\": {\n    \"businessOwner\": \"John Doe\",\n    \"businessOwnerEmail\": \"johndoe@wso2.com\",\n    \"technicalOwner\": \"Jane Roe\",\n    \"technicalOwnerEmail\": \"janeroe@wso2.com\"\n  },\n  \"endpointConfig\": {\n    \"endpoint_type\": \"http\",\n    \"sandbox_endpoints\": {\n      \"url\": \"https://localhost:9443/am/sample/pizzashack/v1/api/\"\n    },\n    \"production_endpoints\": {\n      \"url\": \"https://localhost:9443/am/sample/pizzashack/v1/api/\"\n    }\n  },\n  \"operations\": [\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"POST\",\n      \"authType\": \"Application & Application User\",\n      \"throttlingPolicy\": \"Unlimited\"\n    },\n    {\n      \"target\": \"/menu\",\n      \"verb\": \"GET\",\n      \"authType\": \"Application & Application User\",\n      \"throttlingPolicy\": \"Unlimited\"\n    }\n  ]\n}",
			"type": "string"
		},
		{
			"key": "sampleWebSocketAPIPayload",
			"value": "{\n  \"name\": \"EchoWebSocket\",\n  \"description\": \"This is a sample websocket API.\",\n  \"context\": \"echowebsocket\",\n  \"version\": \"1.0.0\",\n  \"provider\": \"admin\",\n  \"lifeCycleStatus\": \"CREATED\",\n  \"responseCachingEnabled\": false,\n  \"destinationStatsEnabled\": \"Disabled\",\n  \"hasThumbnail\": false,\n  \"isDefaultVersion\": false,\n  \"enableSchemaValidation\": false,\n  \"enableStore\": true,\n  \"type\": \"WS\",\n  \"transport\": [\n    \"http\",\n    \"https\"\n  ],\n  \"tags\": [\n    \"websocket\"\n  ],\n  \"policies\": [\n    \"Unlimited\"\n  ],\n  \"apiThrottlingPolicy\": \"Unlimited\",\n  \"securityScheme\": [\"oauth2\"],\n  \"maxTps\": {\n    \"production\": 1000,\n    \"sandbox\": 1000\n  },\n  \"visibility\": \"PUBLIC\",\n  \"visibleRoles\": [],\n  \"visibleTenants\": [],\n  \"gatewayEnvironments\": [\n    \"Production and Sandbox\"\n  ],\n  \"subscriptionAvailability\": \"CURRENT_TENANT\",\n  \"additionalProperties\": {\n    \"additionalProp1\": \"additionalPropVal1\"\n  },\n  \"accessControl\": \"NONE\",\n  \"businessInformation\": {\n    \"businessOwner\": \"John Doe\",\n    \"businessOwnerEmail\": \"johndoe@wso2.com\",\n    \"technicalOwner\": \"Jane Roe\",\n    \"technicalOwnerEmail\": \"janeroe@wso2.com\"\n  },\n  \"endpointConfig\": {\n    \"endpoint_type\": \"http\",\n    \"sandbox_endpoints\": {\n      \"url\": \"ws://echo.websocket.org:80\"\n    },\n    \"production_endpoints\": {\n      \"url\": \"ws://echo.websocket.org:80\"\n    }\n  }\n}",
			"type": "string"
		},
		{
			"key": "base64(username:password)",
			"value": "YWRtaW46YWRtaW4=",
			"type": "string"
		},
		{
			"key": "globalMediationPolicyId",
			"value": "d48a3412-1b85-49be-99f4-b81a3722ae73",
			"type": "string"
		},
		{
			"key": "pizzashackAPIId",
			"value": "b4d4deba-3388-4983-99cd-ea0863e3e204",
			"type": "string"
		},
		{
			"key": "graphqlApiId",
			"value": "",
			"type": "string"
		},
		{
			"key": "wsdlApiId",
			"value": "",
			"type": "string"
		},
		{
			"key": "dcrClientId",
			"value": "",
			"type": "string"
		},
		{
			"key": "dcrClientSecret",
			"value": "",
			"type": "string"
		},
		{
			"key": "base64EncodedDCRCredentials",
			"value": "",
			"type": "string"
		},
		{
			"key": "tokenEndpoint",
			"value": "https://localhost:8243/token",
			"type": "string"
		},
		{
			"key": "username",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "password",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "restAPIScopes",
			"value": "",
			"type": "string"
		},
		{
			"key": "dcrEndpoint",
			"value": "https://localhost:9443/client-registration/v0.17/register",
			"type": "string"
		},
		{
			"key": "applicationID",
			"value": ""
		},
		{
			"key": "APIKey",
			"value": ""
		},
		{
			"key": "keyMappingId",
			"value": ""
		},
		{
			"key": "consumerSecret",
			"value": ""
		},
		{
			"key": "API-accessToken",
			"value": ""
		},
		{
			"key": "subscriptionID",
			"value": ""
		},
		{
			"key": "accesstoken",
			"value": ""
		},
		{
			"key": "policyId",
			"value": ""
		},
		{
			"key": "deleteAPIId",
			"value": ""
		},
		{
			"key": "time1",
			"value": ""
		},
		{
			"key": "time2",
			"value": ""
		},
		{
			"key": "applicationId",
			"value": ""
		},
		{
			"key": "application-Id",
			"value": ""
		},
		{
			"key": "keymanagerID",
			"value": ""
		},
		{
			"key": "applicationsID",
			"value": ""
		},
		{
			"key": "timeL1",
			"value": ""
		},
		{
			"key": "timeL2",
			"value": ""
		},
		{
			"key": "timeT1",
			"value": ""
		},
		{
			"key": "T1",
			"value": ""
		},
		{
			"key": "t1",
			"value": ""
		},
		{
			"key": "t2",
			"value": ""
		}
	]
}