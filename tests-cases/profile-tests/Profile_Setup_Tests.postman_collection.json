{
	"info": {
		"_postman_id": "f9058d19-7917-4162-bc5a-59c5402c1c5e",
		"name": "Profile Setup Tests - 4.1.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3432412"
	},
	"item": [
		{
			"name": "Authentication for the Super Admin",
			"item": [
				{
					"name": "Register DCR Application for Super Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"DCR application creation for super admin user\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// DCR response JSON",
									"var dcrResponseJson = pm.response.json();",
									"",
									"var dcrAppClientId = dcrResponseJson.clientId;",
									"var dcrAppClientSecret = dcrResponseJson.clientSecret;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"dcr_app_client_id\", dcrAppClientId);",
									"pm.environment.set(\"dcr_app_client_secret\", dcrAppClientSecret);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{super_admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{super_admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"callbackUrl\": \"www.google.lk\",\n\t\"clientName\": \"rest_api_publisher\",\n\t\"owner\": \"admin\",\n\t\"grantType\": \"client_credentials password refresh_token\",\n\t\"saasApp\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{dcr_path}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{dcr_path}}"
						}
					},
					"response": []
				},
				{
					"name": "GET Access Token for Super Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"DCR application token generation for super admin user\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// DCR response JSON",
									"var dcrResponseJson = pm.response.json();",
									"",
									"var dcrAppAccessToken = dcrResponseJson.access_token;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"dcr_app_access_token\", dcrAppAccessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{dcr_app_client_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{dcr_app_client_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{super_admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{super_admin_password}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "apim:api_view apim:api_publish apim:api_create apim:subscribe apim:subscription_view apim:document_create apim:comment_write apim:admin apim:tier_manage apim:scope_manage apim:admin_operations apim:shared_scope_manage apim:mediation_policy_create apim:api_import_export apim:mediation_policy_view apim:app_manage apim:sub_manage apim:admin apim:tier_view",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{gateway_token_path}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{gateway_token_path}}"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API and Application Related Basic Tests Cases",
			"item": [
				{
					"name": "Create API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API creation\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// API creation response JSON",
									"var apiCreationResponseJson = pm.response.json();",
									"",
									"var apiId = apiCreationResponseJson.id;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"api_id\", apiId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PizzaShackAPI\",\n  \"description\": \"This is a simple API for Pizza Shack online pizza delivery store.\",\n  \"context\": \"/pizzashack\",\n  \"version\": \"1.0.0\",\n  \"transport\": [\n    \"http\",\n    \"https\"\n  ],\n  \"tags\": [\n    \"pizza\"\n  ],\n  \"policies\": [\n    \"Unlimited\"\n  ],\n  \"securityScheme\": [\n    \"oauth2\"\n  ],\n  \"visibility\": \"PUBLIC\",\n  \"businessInformation\": {\n    \"businessOwner\": \"Jane Roe\",\n    \"businessOwnerEmail\": \"marketing@pizzashack.com\",\n    \"technicalOwner\": \"John Doe\",\n    \"technicalOwnerEmail\": \"architecture@pizzashack.com\"\n  },\n  \"endpointConfig\": {\n    \"endpoint_type\": \"http\",\n    \"sandbox_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    },\n    \"production_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    }\n  },\n  \"operations\": [\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"DELETE\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"PUT\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/menu\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order\",\n      \"verb\": \"POST\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis?openAPIVersion=v3",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "openAPIVersion",
									"value": "v3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Update API with a tag addition\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PizzaShackAPI\",\n  \"description\": \"This is a simple API for Pizza Shack online pizza delivery store.\",\n  \"context\": \"/pizzashack\",\n  \"version\": \"1.0.0\",\n  \"transport\": [\n    \"http\",\n    \"https\"\n  ],\n  \"tags\": [\n    \"pizza\",\n    \"pizzaTag\"\n  ],\n  \"policies\": [\n    \"Unlimited\"\n  ],\n  \"securityScheme\": [\n    \"oauth2\"\n  ],\n  \"visibility\": \"PUBLIC\",\n  \"businessInformation\": {\n    \"businessOwner\": \"Jane Roe\",\n    \"businessOwnerEmail\": \"marketing@pizzashack.com\",\n    \"technicalOwner\": \"John Doe\",\n    \"technicalOwnerEmail\": \"architecture@pizzashack.com\"\n  },\n  \"endpointConfig\": {\n    \"endpoint_type\": \"http\",\n    \"sandbox_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    },\n    \"production_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    }\n  },\n  \"operations\": [\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"DELETE\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"PUT\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/menu\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order\",\n      \"verb\": \"POST\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Revision",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API revision creation\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// API creation response JSON",
									"var revisionCreationResponseJson = pm.response.json();",
									"",
									"var apiId = revisionCreationResponseJson.apiInfo.id;",
									"",
									"// Assert the API ID",
									"pm.test(\"Revision created for the API\", function () {",
									"    pm.expect(apiId).to.eql(pm.environment.get(\"api_id\"));",
									"});",
									"",
									"// Assert the description",
									"pm.test(\"Revision created with the description\", function () {",
									"    pm.expect(revisionCreationResponseJson.description).to.eql(\"Initial Revision\");",
									"});",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"revision_id\", revisionCreationResponseJson.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Initial Revision\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}/revisions",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_id}}",
								"revisions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deploy API Revision",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API revision deployment\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// API creation response JSON",
									"var revisionDeploymentResponseJson = pm.response.json();",
									"",
									"// Assert the revision ID",
									"pm.test(\"Revision deployed for the API\", function () {",
									"    pm.expect(revisionDeploymentResponseJson[0].revisionUuid).to.eql(pm.environment.get(\"revision_id\"));",
									"});",
									"",
									"setTimeout(function(){}, pm.environment.get(\"wait_time_for_deployment\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"Default\",\n        \"displayOnDevportal\": true,\n        \"vhost\": \"{{gateway_host}}\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}/deploy-revision?revisionId={{revision_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_id}}",
								"deploy-revision"
							],
							"query": [
								{
									"key": "revisionId",
									"value": "{{revision_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Created API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve the created API\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var apiResponseJson = pm.response.json();",
									"",
									"// Assert the API name",
									"pm.test(\"Retrieve the created API name\", function () {",
									"    pm.expect(apiResponseJson.name).to.eql(\"PizzaShackAPI\");",
									"});",
									"",
									"// Assert the added tag",
									"var apiTags = [\"pizza\", \"pizzaTag\"];",
									"pm.test(\"Retrieve the created API tags from the API\", function () {",
									"    pm.expect(apiResponseJson.tags).to.eql(apiTags);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Publish the API with schema validation\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/change-lifecycle?action=Publish&apiId={{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"change-lifecycle"
							],
							"query": [
								{
									"key": "action",
									"value": "Publish"
								},
								{
									"key": "apiId",
									"value": "{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Published API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve the published API\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var apiResponseJson = pm.response.json();",
									"",
									"// Assert the API name",
									"pm.test(\"Retrieve the created API name\", function () {",
									"    pm.expect(apiResponseJson.name).to.eql(\"PizzaShackAPI\");",
									"});",
									"",
									"// Assert the added tag",
									"var apiTags = [\"pizza\", \"pizzaTag\"];",
									"pm.test(\"Retrieve the created API tags from the API\", function () {",
									"    pm.expect(apiResponseJson.tags).to.eql(apiTags);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/apis/{{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"apis",
								"{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Application creation\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Application creation response JSON",
									"var appCreationResponseJson = pm.response.json();",
									"",
									"var applicationId = appCreationResponseJson.applicationId;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"application_id\", applicationId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PizzaShackApp\",\n  \"throttlingPolicy\": \"Unlimited\",\n  \"description\": \"\",\n  \"tokenType\": \"JWT\",\n  \"groups\": null,\n  \"attributes\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Update application with description\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PizzaShackApp\",\n  \"throttlingPolicy\": \"Unlimited\",\n  \"description\": \"PizzaShack Application\",\n  \"tokenType\": \"JWT\",\n  \"groups\": null,\n  \"attributes\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Created Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve the created application\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var appResponseJson = pm.response.json();",
									"",
									"// Assert the application name",
									"pm.test(\"Retrieve the created application name\", function () {",
									"    pm.expect(appResponseJson.name).to.eql(\"PizzaShackApp\");",
									"});",
									"",
									"// Assert the application description",
									"pm.test(\"Retrieve the created application description\", function () {",
									"    pm.expect(appResponseJson.description).to.eql(\"PizzaShack Application\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Gateway API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve the gateway APIs\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var apiListResponseJson = pm.response.json();",
									"",
									"// Assert the API count",
									"pm.test(\"Retrieve the API count for the provided details\", function () {",
									"    pm.expect(apiListResponseJson.count).to.eql(1);",
									"});",
									"",
									"// Assert the API ID from the retrieved APIs",
									"pm.test(\"Retrieve the API ID from the retrieved APIs\", function () {",
									"    pm.expect(apiListResponseJson.list[0].apiUUID).to.eql(pm.environment.get(\"api_id\"));",
									"});",
									"",
									"// Assert the API name from the retrieved APIs",
									"pm.test(\"Retrieve the API name from the retrieved APIs\", function () {",
									"    pm.expect(apiListResponseJson.list[0].name).to.eql(\"PizzaShackAPI\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{super_admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{super_admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{gateway_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{gateway_base_path}}/apis?context=/pizzashack/1.0.0&version=1.0.0&tenantDomain={{super_tenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{gateway_base_path}}",
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "context",
									"value": "/pizzashack/1.0.0"
								},
								{
									"key": "version",
									"value": "1.0.0"
								},
								{
									"key": "tenantDomain",
									"value": "{{super_tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Gateway Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve the gateway applications\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var appListResponseJson = pm.response.json();",
									"",
									"// Assert the application count",
									"pm.test(\"Retrieve the application count for the provided details\", function () {",
									"    pm.expect(appListResponseJson.count).to.eql(1);",
									"});",
									"",
									"// Assert the application ID from the retrieved applications",
									"pm.test(\"Retrieve the application ID from the retrieved applications\", function () {",
									"    pm.expect(appListResponseJson.list[0].uuid).to.eql(pm.environment.get(\"application_id\"));",
									"});",
									"",
									"// Assert the application name from the retrieved applications",
									"pm.test(\"Retrieve the application name from the retrieved applications\", function () {",
									"    pm.expect(appListResponseJson.list[0].name).to.eql(\"PizzaShackApp\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{super_admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{super_admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{gateway_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{gateway_base_path}}/applications?name=PizzaShackApp&tenantDomain={{super_tenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{gateway_base_path}}",
							"path": [
								"applications"
							],
							"query": [
								{
									"key": "name",
									"value": "PizzaShackApp"
								},
								{
									"key": "tenantDomain",
									"value": "{{super_tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Subscription to the API\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"applicationId\": \"{{application_id}}\",\n  \"apiId\": \"{{api_id}}\",\n  \"throttlingPolicy\": \"Unlimited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/subscriptions",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Created Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve the created subscription\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var subscriptionListResponseJson = pm.response.json();",
									"",
									"// Assert the subscription count",
									"pm.test(\"Retrieve the created subscription count for the API\", function () {",
									"    pm.expect(subscriptionListResponseJson.count).to.eql(1);",
									"});",
									"",
									"// Assert the application ID from the subscription",
									"pm.test(\"Retrieve the application ID for the subscription\", function () {",
									"    pm.expect(subscriptionListResponseJson.list[0].applicationId).to.eql(pm.environment.get(\"application_id\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 1000);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/subscriptions?apiId={{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"subscriptions"
							],
							"query": [
								{
									"key": "apiId",
									"value": "{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Gateway Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve the gateway subscription\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var subscriptionResponseJson = pm.response.json();",
									"",
									"// Assert the policy ID from the subscription",
									"pm.test(\"Retrieve the policy ID for the subscription\", function () {",
									"    pm.expect(subscriptionResponseJson.policyId).to.eql(\"Unlimited\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{super_admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{super_admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{gateway_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{gateway_base_path}}/subscriptions?apiUUID={{api_id}}&appUUID={{application_id}}&tenantDomain={{super_tenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{gateway_base_path}}",
							"path": [
								"subscriptions"
							],
							"query": [
								{
									"key": "apiUUID",
									"value": "{{api_id}}"
								},
								{
									"key": "appUUID",
									"value": "{{application_id}}"
								},
								{
									"key": "tenantDomain",
									"value": "{{super_tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Key Manager for Key Generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve keymanager to generate keys\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Keymanager retrieval response JSON",
									"var keymanagerArrayJsonResponse = pm.response.json();",
									"",
									"var keymanagerId = keymanagerArrayJsonResponse.list[0].id;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"keymanager_id\", keymanagerId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/key-managers",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"key-managers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Keys for Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Generate keys for the application\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Key generation response JSON",
									"var keyGenerationResponseJson = pm.response.json();",
									"",
									"var keyMappingId = keyGenerationResponseJson.keyMappingId;",
									"var appConsumerSecret = keyGenerationResponseJson.consumerSecret;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"key_mapping_id\", keyMappingId);",
									"pm.environment.set(\"app_consumer_secret\", appConsumerSecret);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"keyType\": \"PRODUCTION\",\n  \"grantTypesToBeSupported\": [\n    \"password\",\n    \"client_credentials\"\n  ],\n  \"callbackUrl\": \"\",\n  \"additionalProperties\": {\n    \"application_access_token_expiry_time\": \"N/A\",\n    \"user_access_token_expiry_time\": \"N/A\",\n    \"refresh_token_expiry_time\": \"N/A\",\n    \"id_token_expiry_time\": \"N/A\",\n    \"pkceMandatory\": \"false\",\n    \"pkceSupportPlain\": \"false\",\n    \"bypassClientCredentials\": \"false\"\n  },\n  \"keyManager\": \"{{keymanager_id}}\",\n  \"validityTime\": 3600,\n  \"scopes\": [\n    \"default\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}/generate-keys",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{application_id}}",
								"generate-keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Access Token for Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Generate access token to invoke APIs\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Access token response JSON",
									"var accessTokenResponseJson = pm.response.json();",
									"",
									"var appAccessToken = accessTokenResponseJson.accessToken;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"app_access_token\", appAccessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"consumerSecret\": \"{{app_consumer_secret}}\",\n  \"validityPeriod\": 3600,\n  \"revokeToken\": null,\n  \"scopes\": [],\n  \"additionalProperties\": {\n    \"id_token_expiry_time\": 3600,\n    \"application_access_token_expiry_time\": 3600,\n    \"user_access_token_expiry_time\": 3600,\n    \"bypassClientCredentials\": false,\n    \"pkceMandatory\": false,\n    \"pkceSupportPlain\": false,\n    \"refresh_token_expiry_time\": 86400\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}/oauth-keys/{{key_mapping_id}}/generate-token",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{application_id}}",
								"oauth-keys",
								"{{key_mapping_id}}",
								"generate-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoke API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API invocation\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{gateway_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{gateway_port}}/pizzashack/1.0.0/menu",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{gateway_port}}",
							"path": [
								"pizzashack",
								"1.0.0",
								"menu"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Application deletion\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Deleted Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve the deleted application\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Deleted Gateway Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve the gateway applications after deletion\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var appListResponseJson = pm.response.json();",
									"",
									"// Assert the application count",
									"pm.test(\"Retrieve the application count for the provided details after deletion\", function () {",
									"    pm.expect(appListResponseJson.count).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{super_admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{super_admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{gateway_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{gateway_base_path}}/applications?name=PizzaShackApp&tenantDomain={{super_tenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{gateway_base_path}}",
							"path": [
								"applications"
							],
							"query": [
								{
									"key": "name",
									"value": "PizzaShackApp"
								},
								{
									"key": "tenantDomain",
									"value": "{{super_tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Deleted Gateway Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve the deleted gateway subscription\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{super_admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{super_admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{gateway_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{gateway_base_path}}/subscriptions?apiUUID={{api_id}}&appUUID={{application_id}}&tenantDomain={{super_tenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{gateway_base_path}}",
							"path": [
								"subscriptions"
							],
							"query": [
								{
									"key": "apiUUID",
									"value": "{{api_id}}"
								},
								{
									"key": "appUUID",
									"value": "{{application_id}}"
								},
								{
									"key": "tenantDomain",
									"value": "{{super_tenant}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API deletion\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Deleted API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve the deleted API\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Deleted Gateway API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve the gateway APIs after deletion\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{super_admin_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{super_admin_username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{gateway_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{gateway_base_path}}/apis?context=/pizzashack&version=1.0.0&tenantDomain={{super_tenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{gateway_base_path}}",
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "context",
									"value": "/pizzashack"
								},
								{
									"key": "version",
									"value": "1.0.0"
								},
								{
									"key": "tenantDomain",
									"value": "{{super_tenant}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "JSON Schema Validation Testcase",
			"item": [
				{
					"name": "Create API with Schema Validation Enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API creation with schema validation enabled\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// API creation response JSON",
									"var apiCreationResponseJson = pm.response.json();",
									"",
									"var apiId = apiCreationResponseJson.id;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"api_id\", apiId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PizzaShackAPI\",\n  \"description\": \"This is a simple API for Pizza Shack online pizza delivery store.\",\n  \"context\": \"/pizzashack\",\n  \"version\": \"1.0.0\",\n  \"transport\": [\n    \"http\",\n    \"https\"\n  ],\n  \"tags\": [\n    \"pizza\"\n  ],\n  \"policies\": [\n    \"Unlimited\"\n  ],\n  \"securityScheme\": [\n    \"oauth2\"\n  ],\n  \"visibility\": \"PUBLIC\",\n  \"businessInformation\": {\n    \"businessOwner\": \"Jane Roe\",\n    \"businessOwnerEmail\": \"marketing@pizzashack.com\",\n    \"technicalOwner\": \"John Doe\",\n    \"technicalOwnerEmail\": \"architecture@pizzashack.com\"\n  },\n  \"endpointConfig\": {\n    \"endpoint_type\": \"http\",\n    \"sandbox_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    },\n    \"production_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    }\n  },\n  \"operations\": [\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"DELETE\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"PUT\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/menu\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order\",\n      \"verb\": \"POST\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    }\n  ],\n  \"enableSchemaValidation\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis?openAPIVersion=v3",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "openAPIVersion",
									"value": "v3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update API Swagger with Schemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Update swagger with schemas for validation\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "apiDefinition",
									"value": "{\"openapi\":\"3.0.0\",\"info\":{\"description\":\"This is a RESTFul API for Pizza Shack online pizza delivery store.\\n\",\"version\":\"1.0.0\",\"title\":\"PizzaShackAPI\",\"contact\":{\"name\":\"John Doe\",\"url\":\"http://www.pizzashack.com\",\"email\":\"architecture@pizzashack.com\"},\"license\":{\"name\":\"Apache 2.0\",\"url\":\"http://www.apache.org/licenses/LICENSE-2.0.html\"}},\"security\":[{\"default\":[]}],\"paths\":{\"/order\":{\"post\":{\"description\":\"Create a new Order\",\"requestBody\":{\"$ref\":\"#/components/requestBodies/Order\"},\"responses\":{\"201\":{\"description\":\"Created. Successful response with the newly created object as entity inthe body.Location header contains URL of newly created entity.\",\"headers\":{\"Location\":{\"description\":\"The URL of the newly created resource.\",\"schema\":{\"type\":\"string\"}},\"Content-Type\":{\"description\":\"The content type of the body.\",\"schema\":{\"type\":\"string\"}}},\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Order\"}}}},\"400\":{\"description\":\"Bad Request. Invalid request or validation error.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Error\"}}}},\"415\":{\"description\":\"Unsupported Media Type. The entity of the request was in a not supported format.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Error\"}}}}},\"security\":[{\"default\":[]}],\"x-auth-type\":\"Application & Application User\",\"x-throttling-tier\":\"Unlimited\",\"x-wso2-application-security\":{\"security-types\":[\"oauth2\"],\"optional\":false}}},\"/menu\":{\"get\":{\"description\":\"Return a list of available menu items\",\"responses\":{\"200\":{\"description\":\"OK. List of APIs is returned.\",\"headers\":{},\"content\":{\"application/json\":{\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/MenuItem\"}}}}},\"406\":{\"description\":\"Not Acceptable. The requested media type is not supported\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Error\"}}}}},\"security\":[{\"default\":[]}],\"x-auth-type\":\"Application & Application User\",\"x-throttling-tier\":\"Unlimited\",\"x-wso2-application-security\":{\"security-types\":[\"oauth2\"],\"optional\":false}}},\"/order/{orderId}\":{\"get\":{\"description\":\"Get details of an Order\",\"parameters\":[{\"name\":\"orderId\",\"in\":\"path\",\"description\":\"Order Id\",\"required\":true,\"schema\":{\"type\":\"string\",\"format\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"OK Requested Order will be returned\",\"headers\":{},\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Order\"}}}},\"404\":{\"description\":\"Not Found. Requested API does not exist.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Error\"}}}},\"406\":{\"description\":\"Not Acceptable. The requested media type is not supported\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Error\"}}}}},\"security\":[{\"default\":[]}],\"x-auth-type\":\"Application & Application User\",\"x-throttling-tier\":\"Unlimited\",\"x-wso2-application-security\":{\"security-types\":[\"oauth2\"],\"optional\":false}},\"put\":{\"description\":\"Update an existing Order\",\"parameters\":[{\"name\":\"orderId\",\"in\":\"path\",\"description\":\"Order Id\",\"required\":true,\"schema\":{\"type\":\"string\",\"format\":\"string\"}}],\"requestBody\":{\"$ref\":\"#/components/requestBodies/Order\"},\"responses\":{\"200\":{\"description\":\"OK. Successful response with updated Order\",\"headers\":{\"Location\":{\"description\":\"The URL of the newly created resource.\",\"schema\":{\"type\":\"string\"}},\"Content-Type\":{\"description\":\"The content type of the body.\",\"schema\":{\"type\":\"string\"}}},\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Order\"}}}},\"400\":{\"description\":\"Bad Request. Invalid request or validation error\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Error\"}}}},\"404\":{\"description\":\"Not Found. The resource to be updated does not exist.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Error\"}}}}},\"security\":[{\"default\":[]}],\"x-auth-type\":\"Application & Application User\",\"x-throttling-tier\":\"Unlimited\",\"x-wso2-application-security\":{\"security-types\":[\"oauth2\"],\"optional\":false}},\"delete\":{\"description\":\"Delete an existing Order\",\"parameters\":[{\"name\":\"orderId\",\"in\":\"path\",\"description\":\"Order Id\",\"required\":true,\"schema\":{\"type\":\"string\",\"format\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"OK. Resource successfully deleted.\"},\"404\":{\"description\":\"Not Found. Resource to be deleted does not exist.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Error\"}}}}},\"security\":[{\"default\":[]}],\"x-auth-type\":\"Application & Application User\",\"x-throttling-tier\":\"Unlimited\",\"x-wso2-application-security\":{\"security-types\":[\"oauth2\"],\"optional\":false}}}},\"x-wso2-auth-header\":\"Authorization\",\"x-wso2-cors\":{\"corsConfigurationEnabled\":false,\"accessControlAllowOrigins\":[\"*\"],\"accessControlAllowCredentials\":false,\"accessControlAllowHeaders\":[\"authorization\",\"Access-Control-Allow-Origin\",\"Content-Type\",\"SOAPAction\",\"apikey\",\"testKey\"],\"accessControlAllowMethods\":[\"GET\",\"PUT\",\"POST\",\"DELETE\",\"PATCH\",\"OPTIONS\"]},\"x-wso2-production-endpoints\":{\"urls\":[\"https://localhost:9443/am/sample/pizzashack/v1/api/\"],\"type\":\"http\"},\"x-wso2-sandbox-endpoints\":{\"urls\":[\"https://localhost:9443/am/sample/pizzashack/v1/api/\"],\"type\":\"http\"},\"x-wso2-basePath\":\"/pizzashack/1.0.0\",\"x-wso2-transports\":[\"http\",\"https\"],\"x-wso2-application-security\":{\"security-types\":[\"oauth2\"],\"optional\":false},\"x-wso2-response-cache\":{\"enabled\":false,\"cacheTimeoutInSeconds\":300},\"components\":{\"requestBodies\":{\"Order\":{\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Order\"}}},\"description\":\"Order object that needs to be added\",\"required\":true}},\"securitySchemes\":{\"default\":{\"type\":\"oauth2\",\"flows\":{\"implicit\":{\"authorizationUrl\":\"https://test.com\",\"scopes\":{}}}}},\"schemas\":{\"ErrorListItem\":{\"required\":[\"code\",\"message\"],\"properties\":{\"message\":{\"type\":\"string\",\"description\":\"Description about individual errors occurred\"},\"code\":{\"type\":\"integer\",\"format\":\"int64\"}},\"title\":\"Description of individual errors that may have occurred during a request.\"},\"MenuItem\":{\"required\":[\"name\"],\"properties\":{\"price\":{\"type\":\"string\"},\"description\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"image\":{\"type\":\"string\"}},\"title\":\"Pizza menu Item\"},\"Order\":{\"required\":[\"orderId\"],\"properties\":{\"customerName\":{\"type\":\"string\"},\"delivered\":{\"type\":\"boolean\"},\"address\":{\"type\":\"string\"},\"pizzaType\":{\"type\":\"string\"},\"creditCardNumber\":{\"type\":\"string\"},\"quantity\":{\"type\":\"number\"},\"orderId\":{\"type\":\"string\"}},\"title\":\"Pizza Order\"},\"Error\":{\"required\":[\"code\",\"message\"],\"properties\":{\"message\":{\"type\":\"string\",\"description\":\"Error message.\"},\"error\":{\"type\":\"array\",\"description\":\"If there are more than one error list them out. Ex. list out validation errors by each field.\",\"items\":{\"$ref\":\"#/components/schemas/ErrorListItem\"}},\"description\":{\"type\":\"string\",\"description\":\"A detail description about the error message.\"},\"code\":{\"type\":\"integer\",\"format\":\"int64\"},\"moreInfo\":{\"type\":\"string\",\"description\":\"Preferably an url with more details about the error.\"}},\"title\":\"Error object returned with 4XX HTTP status\"}}}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}/swagger",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_id}}",
								"swagger"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Revision",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API revision creation\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// API creation response JSON",
									"var revisionCreationResponseJson = pm.response.json();",
									"",
									"var apiId = revisionCreationResponseJson.apiInfo.id;",
									"",
									"// Assert the API ID",
									"pm.test(\"Revision created for the API\", function () {",
									"    pm.expect(apiId).to.eql(pm.environment.get(\"api_id\"));",
									"});",
									"",
									"// Assert the description",
									"pm.test(\"Revision created with the description\", function () {",
									"    pm.expect(revisionCreationResponseJson.description).to.eql(\"Initial Revision\");",
									"});",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"revision_id\", revisionCreationResponseJson.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Initial Revision\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}/revisions",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_id}}",
								"revisions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deploy API Revision",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API revision deployment\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// API creation response JSON",
									"var revisionDeploymentResponseJson = pm.response.json();",
									"",
									"// Assert the revision ID",
									"pm.test(\"Revision deployed for the API\", function () {",
									"    pm.expect(revisionDeploymentResponseJson[0].revisionUuid).to.eql(pm.environment.get(\"revision_id\"));",
									"});",
									"",
									"setTimeout(function(){}, pm.environment.get(\"wait_time_for_deployment\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"Default\",\n        \"displayOnDevportal\": true,\n        \"vhost\": \"{{gateway_host}}\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}/deploy-revision?revisionId={{revision_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_id}}",
								"deploy-revision"
							],
							"query": [
								{
									"key": "revisionId",
									"value": "{{revision_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Created API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve the created API\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish Created API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Publish the API with schema validation\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/change-lifecycle?action=Publish&apiId={{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"change-lifecycle"
							],
							"query": [
								{
									"key": "action",
									"value": "Publish"
								},
								{
									"key": "apiId",
									"value": "{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Application creation\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Application creation response JSON",
									"var appCreationResponseJson = pm.response.json();",
									"",
									"var applicationId = appCreationResponseJson.applicationId;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"application_id\", applicationId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PizzaShackApp\",\n  \"throttlingPolicy\": \"Unlimited\",\n  \"description\": \"\",\n  \"tokenType\": \"JWT\",\n  \"groups\": null,\n  \"attributes\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Subscription to the API\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"applicationId\": \"{{application_id}}\",\n  \"apiId\": \"{{api_id}}\",\n  \"throttlingPolicy\": \"Unlimited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/subscriptions",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Key Manager for Key Generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve keymanager to generate keys\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Keymanager retrieval response JSON",
									"var keymanagerArrayJsonResponse = pm.response.json();",
									"",
									"var keymanagerId = keymanagerArrayJsonResponse.list[0].id;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"keymanager_id\", keymanagerId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/key-managers",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"key-managers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Keys for Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Generate keys for the application\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Key generation response JSON",
									"var keyGenerationResponseJson = pm.response.json();",
									"",
									"var keyMappingId = keyGenerationResponseJson.keyMappingId;",
									"var appConsumerSecret = keyGenerationResponseJson.consumerSecret;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"key_mapping_id\", keyMappingId);",
									"pm.environment.set(\"app_consumer_secret\", appConsumerSecret);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"keyType\": \"PRODUCTION\",\n  \"grantTypesToBeSupported\": [\n    \"password\",\n    \"client_credentials\"\n  ],\n  \"callbackUrl\": \"\",\n  \"additionalProperties\": {\n    \"application_access_token_expiry_time\": \"N/A\",\n    \"user_access_token_expiry_time\": \"N/A\",\n    \"refresh_token_expiry_time\": \"N/A\",\n    \"id_token_expiry_time\": \"N/A\",\n    \"pkceMandatory\": \"false\",\n    \"pkceSupportPlain\": \"false\",\n    \"bypassClientCredentials\": \"false\"\n  },\n  \"keyManager\": \"{{keymanager_id}}\",\n  \"validityTime\": 3600,\n  \"scopes\": [\n    \"default\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}/generate-keys",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{application_id}}",
								"generate-keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Access Token for Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Generate access token to invoke APIs\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Access token response JSON",
									"var accessTokenResponseJson = pm.response.json();",
									"",
									"var appAccessToken = accessTokenResponseJson.accessToken;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"app_access_token\", appAccessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"consumerSecret\": \"{{app_consumer_secret}}\",\n  \"validityPeriod\": 3600,\n  \"revokeToken\": null,\n  \"scopes\": [],\n  \"additionalProperties\": {\n    \"id_token_expiry_time\": 3600,\n    \"application_access_token_expiry_time\": 3600,\n    \"user_access_token_expiry_time\": 3600,\n    \"bypassClientCredentials\": false,\n    \"pkceMandatory\": false,\n    \"pkceSupportPlain\": false,\n    \"refresh_token_expiry_time\": 86400\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}/oauth-keys/{{key_mapping_id}}/generate-token",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{application_id}}",
								"oauth-keys",
								"{{key_mapping_id}}",
								"generate-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoke API with Valid Request Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Invoke API with valid request body\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{gateway_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"string\",\n  \"delivered\": true,\n  \"address\": \"string\",\n  \"pizzaType\": \"string\",\n  \"creditCardNumber\": \"string\",\n  \"quantity\": 0,\n  \"orderId\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{gateway_port}}/pizzashack/1.0.0/order",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{gateway_port}}",
							"path": [
								"pizzashack",
								"1.0.0",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoke API with Invalid Request Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Invoke API with invalid request body\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var apiResponse = pm.response.text();",
									"",
									"pm.test(\"Response received for invalid request body\", function() {",
									"    pm.expect(apiResponse.includes(\"Schema validation failed in the Request\")).is.to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{gateway_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"string\",\n  \"delivered\": true,\n  \"address\": \"string\",\n  \"pizzaType\": \"string\",\n  \"creditCardNumber\": \"string\",\n  \"quantity\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{gateway_port}}/pizzashack/1.0.0/order",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{gateway_port}}",
							"path": [
								"pizzashack",
								"1.0.0",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoke API with Invalid Response Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Invoke API with invalid response body\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var apiResponse = pm.response.text();",
									"",
									"pm.test(\"Response received for invalid response body\", function() {",
									"    pm.expect(apiResponse.includes(\"Schema validation failed in the Response\")).is.to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{gateway_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"address\": \"string\",\n  \"pizzaType\": \"string\",\n  \"creditCardNumber\": \"string\",\n  \"quantity\": 0,\n  \"orderId\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{gateway_port}}/pizzashack/1.0.0/order",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{gateway_port}}",
							"path": [
								"pizzashack",
								"1.0.0",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Application deletion\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API deletion\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Throttling Testcases",
			"item": [
				{
					"name": "Application Level Throttling",
					"item": [
						{
							"name": "Add Application Throttling Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Application throttling policy creation\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Application throttling policy creation response JSON",
											"var applicationThrottlingPolicyCreationResponseJson = pm.response.json();",
											"",
											"var policyId = applicationThrottlingPolicyCreationResponseJson.policyId;",
											"",
											"// Set the environment variables",
											"pm.environment.set(\"application_throttling_policy_id\", policyId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"policyName\": \"5PerMin\",\n  \"description\": \"Allows 5 request per minute\",\n  \"defaultLimit\": {\n    \"type\": \"REQUESTCOUNTLIMIT\",\n    \"requestCount\": {\n      \"requestCount\": \"5\",\n      \"timeUnit\": \"min\",\n      \"unitTime\": \"1\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{admin_base_path}}/throttling/policies/application",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{admin_base_path}}",
									"path": [
										"throttling",
										"policies",
										"application"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"API creation\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// API creation response JSON",
											"var apiCreationResponseJson = pm.response.json();",
											"",
											"var apiId = apiCreationResponseJson.id;",
											"",
											"// Set the environment variables",
											"pm.environment.set(\"api_id\", apiId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"PizzaShackAPI\",\n  \"description\": \"This is a simple API for Pizza Shack online pizza delivery store.\",\n  \"context\": \"/pizzashack\",\n  \"version\": \"1.0.0\",\n  \"transport\": [\n    \"http\",\n    \"https\"\n  ],\n  \"tags\": [\n    \"pizza\"\n  ],\n  \"policies\": [\n    \"Unlimited\"\n  ],\n  \"securityScheme\": [\n    \"oauth2\"\n  ],\n  \"visibility\": \"PUBLIC\",\n  \"businessInformation\": {\n    \"businessOwner\": \"Jane Roe\",\n    \"businessOwnerEmail\": \"marketing@pizzashack.com\",\n    \"technicalOwner\": \"John Doe\",\n    \"technicalOwnerEmail\": \"architecture@pizzashack.com\"\n  },\n  \"endpointConfig\": {\n    \"endpoint_type\": \"http\",\n    \"sandbox_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    },\n    \"production_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    }\n  },\n  \"operations\": [\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"DELETE\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"PUT\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/menu\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order\",\n      \"verb\": \"POST\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis?openAPIVersion=v3",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{publisher_base_path}}",
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "openAPIVersion",
											"value": "v3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create API Revision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"API revision creation\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// API creation response JSON",
											"var revisionCreationResponseJson = pm.response.json();",
											"",
											"var apiId = revisionCreationResponseJson.apiInfo.id;",
											"",
											"// Assert the API ID",
											"pm.test(\"Revision created for the API\", function () {",
											"    pm.expect(apiId).to.eql(pm.environment.get(\"api_id\"));",
											"});",
											"",
											"// Assert the description",
											"pm.test(\"Revision created with the description\", function () {",
											"    pm.expect(revisionCreationResponseJson.description).to.eql(\"Initial Revision\");",
											"});",
											"",
											"// Set the environment variables",
											"pm.environment.set(\"revision_id\", revisionCreationResponseJson.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"Initial Revision\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}/revisions",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{publisher_base_path}}",
									"path": [
										"apis",
										"{{api_id}}",
										"revisions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deploy API Revision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"API revision deployment\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// API creation response JSON",
											"var revisionDeploymentResponseJson = pm.response.json();",
											"",
											"// Assert the revision ID",
											"pm.test(\"Revision deployed for the API\", function () {",
											"    pm.expect(revisionDeploymentResponseJson[0].revisionUuid).to.eql(pm.environment.get(\"revision_id\"));",
											"});",
											"",
											"setTimeout(function(){}, pm.environment.get(\"wait_time_for_deployment\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"name\": \"Default\",\n        \"displayOnDevportal\": true,\n        \"vhost\": \"{{gateway_host}}\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}/deploy-revision?revisionId={{revision_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{publisher_base_path}}",
									"path": [
										"apis",
										"{{api_id}}",
										"deploy-revision"
									],
									"query": [
										{
											"key": "revisionId",
											"value": "{{revision_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Publish API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Publish the API with schema validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/change-lifecycle?action=Publish&apiId={{api_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{publisher_base_path}}",
									"path": [
										"apis",
										"change-lifecycle"
									],
									"query": [
										{
											"key": "action",
											"value": "Publish"
										},
										{
											"key": "apiId",
											"value": "{{api_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Application with Created Throttling Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Application creation\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Application creation response JSON",
											"var appCreationResponseJson = pm.response.json();",
											"",
											"var applicationId = appCreationResponseJson.applicationId;",
											"",
											"// Set the environment variables",
											"pm.environment.set(\"application_id\", applicationId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"PizzaShackApp\",\n  \"throttlingPolicy\": \"5PerMin\",\n  \"description\": \"\",\n  \"tokenType\": \"JWT\",\n  \"groups\": null,\n  \"attributes\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{devportal_base_path}}",
									"path": [
										"applications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Subscription to the API\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"applicationId\": \"{{application_id}}\",\n  \"apiId\": \"{{api_id}}\",\n  \"throttlingPolicy\": \"Unlimited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/subscriptions",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{devportal_base_path}}",
									"path": [
										"subscriptions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Key Manager for Key Generation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Retrieve keymanager to generate keys\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Keymanager retrieval response JSON",
											"var keymanagerArrayJsonResponse = pm.response.json();",
											"",
											"var keymanagerId = keymanagerArrayJsonResponse.list[0].id;",
											"",
											"// Set the environment variables",
											"pm.environment.set(\"keymanager_id\", keymanagerId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/key-managers",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{devportal_base_path}}",
									"path": [
										"key-managers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Keys for Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Generate keys for the application\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Key generation response JSON",
											"var keyGenerationResponseJson = pm.response.json();",
											"",
											"var keyMappingId = keyGenerationResponseJson.keyMappingId;",
											"var appConsumerSecret = keyGenerationResponseJson.consumerSecret;",
											"",
											"// Set the environment variables",
											"pm.environment.set(\"key_mapping_id\", keyMappingId);",
											"pm.environment.set(\"app_consumer_secret\", appConsumerSecret);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"keyType\": \"PRODUCTION\",\n  \"grantTypesToBeSupported\": [\n    \"password\",\n    \"client_credentials\"\n  ],\n  \"callbackUrl\": \"\",\n  \"additionalProperties\": {\n    \"application_access_token_expiry_time\": \"N/A\",\n    \"user_access_token_expiry_time\": \"N/A\",\n    \"refresh_token_expiry_time\": \"N/A\",\n    \"id_token_expiry_time\": \"N/A\",\n    \"pkceMandatory\": \"false\",\n    \"pkceSupportPlain\": \"false\",\n    \"bypassClientCredentials\": \"false\"\n  },\n  \"keyManager\": \"{{keymanager_id}}\",\n  \"validityTime\": 3600,\n  \"scopes\": [\n    \"default\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}/generate-keys",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{devportal_base_path}}",
									"path": [
										"applications",
										"{{application_id}}",
										"generate-keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Access Token for Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Generate access token to invoke APIs\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Access token response JSON",
											"var accessTokenResponseJson = pm.response.json();",
											"",
											"var appAccessToken = accessTokenResponseJson.accessToken;",
											"",
											"// Set the environment variables",
											"pm.environment.set(\"app_access_token\", appAccessToken);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"consumerSecret\": \"{{app_consumer_secret}}\",\n  \"validityPeriod\": 3600,\n  \"revokeToken\": null,\n  \"scopes\": [],\n  \"additionalProperties\": {\n    \"id_token_expiry_time\": 3600,\n    \"application_access_token_expiry_time\": 3600,\n    \"user_access_token_expiry_time\": 3600,\n    \"bypassClientCredentials\": false,\n    \"pkceMandatory\": false,\n    \"pkceSupportPlain\": false,\n    \"refresh_token_expiry_time\": 86400\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}/oauth-keys/{{key_mapping_id}}/generate-token",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{devportal_base_path}}",
									"path": [
										"applications",
										"{{application_id}}",
										"oauth-keys",
										"{{key_mapping_id}}",
										"generate-token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invoke API to Test Application-level Throttling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// check the applicationRetryCounter",
											"pm.variables.get(\"applicationRetryCounter\") === undefined ? pm.variables.set('applicationRetryCounter', pm.variables.get(\"retryCount\")) : null",
											"retryCount = pm.variables.get(\"applicationRetryCounter\");",
											"",
											"var throttledOut = false;",
											"if (pm.response.code == 429) {",
											"    throttledOut = true;",
											"}",
											"",
											"// Assert when throttled out",
											"if (throttledOut) {",
											"    pm.test(\"API request is throttled\", function () {",
											"        pm.response.to.have.status(429);",
											"    });",
											"}",
											"",
											"if (retryCount > 1 && !throttledOut) {",
											"    setTimeout(function(){}, 800);",
											"    pm.variables.set('applicationRetryCounter', --retryCount)",
											"    postman.setNextRequest(pm.info.requestName);",
											"} else if (retryCount == 1 && !throttledOut) {",
											"    pm.test(\"API request is not throttled\", function () {",
											"        pm.response.to.have.status(429);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"retryCount\", 15);",
											"setTimeout(function(){}, 800);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{gateway_host}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{gateway_port}}/pizzashack/1.0.0/menu",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{gateway_port}}",
									"path": [
										"pizzashack",
										"1.0.0",
										"menu"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Application deletion\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{devportal_base_path}}",
									"path": [
										"applications",
										"{{application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"API deletion\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{publisher_base_path}}",
									"path": [
										"apis",
										"{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Application Throttling Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"API deletion\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{admin_base_path}}/throttling/policies/application/{{application_throttling_policy_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{admin_base_path}}",
									"path": [
										"throttling",
										"policies",
										"application",
										"{{application_throttling_policy_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Subscription Level Throttling",
					"item": [
						{
							"name": "Add Subscription Throttling Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Application throttling policy creation\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Subscription throttling policy creation response JSON",
											"var subscriptionThrottlingPolicyCreationResponseJson = pm.response.json();",
											"",
											"var policyId = subscriptionThrottlingPolicyCreationResponseJson.policyId;",
											"",
											"// Set the environment variables",
											"pm.environment.set(\"subscription_throttling_policy_id\", policyId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"policyName\": \"5PerMin\",\n  \"description\": \"Allows 5 request per minute\",\n  \"defaultLimit\": {\n    \"type\": \"REQUESTCOUNTLIMIT\",\n    \"requestCount\": {\n      \"requestCount\": \"5\",\n      \"timeUnit\": \"min\",\n      \"unitTime\": \"1\"\n    }\n  },\n  \"subscriberCount\": 0,\n  \"rateLimitCount\": 0,\n  \"rateLimitTimeUnit\": \"sec\",\n  \"billingPlan\": \"FREE\",\n  \"stopOnQuotaReach\": true,\n  \"customAttributes\": [],\n  \"graphQLMaxComplexity\": 0,\n  \"graphQLMaxDepth\": 0,\n  \"monetization\": {\n    \"monetizationPlan\": \"FIXEDRATE\",\n    \"properties\": {\n      \"fixedPrice\": \"\",\n      \"pricePerRequest\": \"\",\n      \"currencyType\": \"\",\n      \"billingCycle\": \"week\"\n    }\n  },\n  \"permissions\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{admin_base_path}}/throttling/policies/subscription",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{admin_base_path}}",
									"path": [
										"throttling",
										"policies",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create API with Created Throttling Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"API creation\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// API creation response JSON",
											"var apiCreationResponseJson = pm.response.json();",
											"",
											"var apiId = apiCreationResponseJson.id;",
											"",
											"// Set the environment variables",
											"pm.environment.set(\"api_id\", apiId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"PizzaShackAPI\",\n  \"description\": \"This is a simple API for Pizza Shack online pizza delivery store.\",\n  \"context\": \"/pizzashack\",\n  \"version\": \"1.0.0\",\n  \"transport\": [\n    \"http\",\n    \"https\"\n  ],\n  \"tags\": [\n    \"pizza\"\n  ],\n  \"policies\": [\n    \"5PerMin\"\n  ],\n  \"securityScheme\": [\n    \"oauth2\"\n  ],\n  \"visibility\": \"PUBLIC\",\n  \"businessInformation\": {\n    \"businessOwner\": \"Jane Roe\",\n    \"businessOwnerEmail\": \"marketing@pizzashack.com\",\n    \"technicalOwner\": \"John Doe\",\n    \"technicalOwnerEmail\": \"architecture@pizzashack.com\"\n  },\n  \"endpointConfig\": {\n    \"endpoint_type\": \"http\",\n    \"sandbox_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    },\n    \"production_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    }\n  },\n  \"operations\": [\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"DELETE\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"PUT\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/menu\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order\",\n      \"verb\": \"POST\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis?openAPIVersion=v3",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{publisher_base_path}}",
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "openAPIVersion",
											"value": "v3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create API Revision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"API revision creation\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// API creation response JSON",
											"var revisionCreationResponseJson = pm.response.json();",
											"",
											"var apiId = revisionCreationResponseJson.apiInfo.id;",
											"",
											"// Assert the API ID",
											"pm.test(\"Revision created for the API\", function () {",
											"    pm.expect(apiId).to.eql(pm.environment.get(\"api_id\"));",
											"});",
											"",
											"// Assert the description",
											"pm.test(\"Revision created with the description\", function () {",
											"    pm.expect(revisionCreationResponseJson.description).to.eql(\"Initial Revision\");",
											"});",
											"",
											"// Set the environment variables",
											"pm.environment.set(\"revision_id\", revisionCreationResponseJson.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"Initial Revision\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}/revisions",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{publisher_base_path}}",
									"path": [
										"apis",
										"{{api_id}}",
										"revisions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deploy API Revision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"API revision deployment\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// API creation response JSON",
											"var revisionDeploymentResponseJson = pm.response.json();",
											"",
											"// Assert the revision ID",
											"pm.test(\"Revision deployed for the API\", function () {",
											"    pm.expect(revisionDeploymentResponseJson[0].revisionUuid).to.eql(pm.environment.get(\"revision_id\"));",
											"});",
											"",
											"setTimeout(function(){}, pm.environment.get(\"wait_time_for_deployment\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"name\": \"Default\",\n        \"displayOnDevportal\": true,\n        \"vhost\": \"{{gateway_host}}\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}/deploy-revision?revisionId={{revision_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{publisher_base_path}}",
									"path": [
										"apis",
										"{{api_id}}",
										"deploy-revision"
									],
									"query": [
										{
											"key": "revisionId",
											"value": "{{revision_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Publish API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Publish the API with schema validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/change-lifecycle?action=Publish&apiId={{api_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{publisher_base_path}}",
									"path": [
										"apis",
										"change-lifecycle"
									],
									"query": [
										{
											"key": "action",
											"value": "Publish"
										},
										{
											"key": "apiId",
											"value": "{{api_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Application creation\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Application creation response JSON",
											"var appCreationResponseJson = pm.response.json();",
											"",
											"var applicationId = appCreationResponseJson.applicationId;",
											"",
											"// Set the environment variables",
											"pm.environment.set(\"application_id\", applicationId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"PizzaShackApp\",\n  \"throttlingPolicy\": \"Unlimited\",\n  \"description\": \"\",\n  \"tokenType\": \"JWT\",\n  \"groups\": null,\n  \"attributes\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{devportal_base_path}}",
									"path": [
										"applications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Subscription with Created Throttling Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Subscription to the API\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"applicationId\": \"{{application_id}}\",\n  \"apiId\": \"{{api_id}}\",\n  \"throttlingPolicy\": \"5PerMin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/subscriptions",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{devportal_base_path}}",
									"path": [
										"subscriptions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Key Manager for Key Generation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Retrieve keymanager to generate keys\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Keymanager retrieval response JSON",
											"var keymanagerArrayJsonResponse = pm.response.json();",
											"",
											"var keymanagerId = keymanagerArrayJsonResponse.list[0].id;",
											"",
											"// Set the environment variables",
											"pm.environment.set(\"keymanager_id\", keymanagerId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/key-managers",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{devportal_base_path}}",
									"path": [
										"key-managers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Keys for Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Generate keys for the application\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Key generation response JSON",
											"var keyGenerationResponseJson = pm.response.json();",
											"",
											"var keyMappingId = keyGenerationResponseJson.keyMappingId;",
											"var appConsumerSecret = keyGenerationResponseJson.consumerSecret;",
											"",
											"// Set the environment variables",
											"pm.environment.set(\"key_mapping_id\", keyMappingId);",
											"pm.environment.set(\"app_consumer_secret\", appConsumerSecret);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"keyType\": \"PRODUCTION\",\n  \"grantTypesToBeSupported\": [\n    \"password\",\n    \"client_credentials\"\n  ],\n  \"callbackUrl\": \"\",\n  \"additionalProperties\": {\n    \"application_access_token_expiry_time\": \"N/A\",\n    \"user_access_token_expiry_time\": \"N/A\",\n    \"refresh_token_expiry_time\": \"N/A\",\n    \"id_token_expiry_time\": \"N/A\",\n    \"pkceMandatory\": \"false\",\n    \"pkceSupportPlain\": \"false\",\n    \"bypassClientCredentials\": \"false\"\n  },\n  \"keyManager\": \"{{keymanager_id}}\",\n  \"validityTime\": 3600,\n  \"scopes\": [\n    \"default\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}/generate-keys",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{devportal_base_path}}",
									"path": [
										"applications",
										"{{application_id}}",
										"generate-keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Access Token for Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Generate access token to invoke APIs\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Access token response JSON",
											"var accessTokenResponseJson = pm.response.json();",
											"",
											"var appAccessToken = accessTokenResponseJson.accessToken;",
											"",
											"// Set the environment variables",
											"pm.environment.set(\"app_access_token\", appAccessToken);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"consumerSecret\": \"{{app_consumer_secret}}\",\n  \"validityPeriod\": 3600,\n  \"revokeToken\": null,\n  \"scopes\": [],\n  \"additionalProperties\": {\n    \"id_token_expiry_time\": 3600,\n    \"application_access_token_expiry_time\": 3600,\n    \"user_access_token_expiry_time\": 3600,\n    \"bypassClientCredentials\": false,\n    \"pkceMandatory\": false,\n    \"pkceSupportPlain\": false,\n    \"refresh_token_expiry_time\": 86400\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}/oauth-keys/{{key_mapping_id}}/generate-token",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{devportal_base_path}}",
									"path": [
										"applications",
										"{{application_id}}",
										"oauth-keys",
										"{{key_mapping_id}}",
										"generate-token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invoke API to Test Subscription-level Throttling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// check the subscriptionRetryCounter",
											"pm.variables.get(\"subscriptionRetryCounter\") === undefined ? pm.variables.set('subscriptionRetryCounter', pm.variables.get(\"retryCount\")) : null",
											"retryCount = pm.variables.get(\"subscriptionRetryCounter\");",
											"",
											"var throttledOut = false;",
											"if (pm.response.code == 429) {",
											"    throttledOut = true;",
											"}",
											"",
											"// Assert when throttled out",
											"if (throttledOut) {",
											"    pm.test(\"API request is throttled\", function () {",
											"        pm.response.to.have.status(429);",
											"    });",
											"}",
											"",
											"if (retryCount > 1 && !throttledOut) {",
											"    setTimeout(function(){}, 800);",
											"    pm.variables.set('subscriptionRetryCounter', --retryCount)",
											"    postman.setNextRequest(pm.info.requestName);",
											"} else if (retryCount == 1 && !throttledOut) {",
											"    pm.test(\"API request is not throttled\", function () {",
											"        pm.response.to.have.status(429);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"retryCount\", 15);",
											"setTimeout(function(){}, 800);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{gateway_host}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{gateway_port}}/pizzashack/1.0.0/menu",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{gateway_port}}",
									"path": [
										"pizzashack",
										"1.0.0",
										"menu"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"Application deletion\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{devportal_base_path}}",
									"path": [
										"applications",
										"{{application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"API deletion\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{publisher_base_path}}",
									"path": [
										"apis",
										"{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Subscription Throttling Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assert the response code",
											"pm.test(\"API deletion\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dcr_app_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Host",
										"value": "{{portals_host}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{admin_base_path}}/throttling/policies/subscription/{{subscription_throttling_policy_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{cluster_ip}}"
									],
									"port": "{{portals_port}}{{admin_base_path}}",
									"path": [
										"throttling",
										"policies",
										"subscription",
										"{{subscription_throttling_policy_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Default API Testcase",
			"item": [
				{
					"name": "Create API with Default Version Enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API creation with default version enabled\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// API creation response JSON",
									"var apiCreationResponseJson = pm.response.json();",
									"",
									"var apiId = apiCreationResponseJson.id;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"api_id\", apiId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PizzaShackAPI\",\n  \"description\": \"This is a simple API for Pizza Shack online pizza delivery store.\",\n  \"context\": \"/pizzashack\",\n  \"version\": \"1.0.0\",\n  \"transport\": [\n    \"http\",\n    \"https\"\n  ],\n  \"tags\": [\n    \"pizza\"\n  ],\n  \"policies\": [\n    \"Unlimited\"\n  ],\n  \"securityScheme\": [\n    \"oauth2\"\n  ],\n  \"visibility\": \"PUBLIC\",\n  \"businessInformation\": {\n    \"businessOwner\": \"Jane Roe\",\n    \"businessOwnerEmail\": \"marketing@pizzashack.com\",\n    \"technicalOwner\": \"John Doe\",\n    \"technicalOwnerEmail\": \"architecture@pizzashack.com\"\n  },\n  \"endpointConfig\": {\n    \"endpoint_type\": \"http\",\n    \"sandbox_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    },\n    \"production_endpoints\": {\n      \"url\": \"{{pizzashack_endpoint}}\"\n    }\n  },\n  \"operations\": [\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"DELETE\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order/{orderId}\",\n      \"verb\": \"PUT\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/menu\",\n      \"verb\": \"GET\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    },\n    {\n      \"target\": \"/order\",\n      \"verb\": \"POST\",\n      \"throttlingPolicy\": \"Unlimited\",\n      \"authType\": \"Application & Application User\"\n    }\n  ],\n  \"isDefaultVersion\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis?openAPIVersion=v3",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "openAPIVersion",
									"value": "v3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Revision",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API revision creation\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// API creation response JSON",
									"var revisionCreationResponseJson = pm.response.json();",
									"",
									"var apiId = revisionCreationResponseJson.apiInfo.id;",
									"",
									"// Assert the API ID",
									"pm.test(\"Revision created for the API\", function () {",
									"    pm.expect(apiId).to.eql(pm.environment.get(\"api_id\"));",
									"});",
									"",
									"// Assert the description",
									"pm.test(\"Revision created with the description\", function () {",
									"    pm.expect(revisionCreationResponseJson.description).to.eql(\"Initial Revision\");",
									"});",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"revision_id\", revisionCreationResponseJson.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Initial Revision\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}/revisions",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_id}}",
								"revisions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deploy API Revision",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API revision deployment\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// API creation response JSON",
									"var revisionDeploymentResponseJson = pm.response.json();",
									"",
									"// Assert the revision ID",
									"pm.test(\"Revision deployed for the API\", function () {",
									"    pm.expect(revisionDeploymentResponseJson[0].revisionUuid).to.eql(pm.environment.get(\"revision_id\"));",
									"});",
									"",
									"setTimeout(function(){}, pm.environment.get(\"wait_time_for_deployment\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"Default\",\n        \"displayOnDevportal\": true,\n        \"vhost\": \"{{gateway_host}}\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}/deploy-revision?revisionId={{revision_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_id}}",
								"deploy-revision"
							],
							"query": [
								{
									"key": "revisionId",
									"value": "{{revision_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Publish the API with schema validation\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/change-lifecycle?action=Publish&apiId={{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"change-lifecycle"
							],
							"query": [
								{
									"key": "action",
									"value": "Publish"
								},
								{
									"key": "apiId",
									"value": "{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Version with Default Version Enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"New version of API created with default version enabled\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// API creation response JSON",
									"var apiCreationResponseJson = pm.response.json();",
									"",
									"var apiId = apiCreationResponseJson.id;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"api_2_id\", apiId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/copy-api?newVersion=2.0.0&defaultVersion=true&apiId={{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"copy-api"
							],
							"query": [
								{
									"key": "newVersion",
									"value": "2.0.0"
								},
								{
									"key": "defaultVersion",
									"value": "true"
								},
								{
									"key": "apiId",
									"value": "{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API Revision for New Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API revision creation\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// API creation response JSON",
									"var revisionCreationResponseJson = pm.response.json();",
									"",
									"var apiId = revisionCreationResponseJson.apiInfo.id;",
									"",
									"// Assert the API ID",
									"pm.test(\"Revision created for the API\", function () {",
									"    pm.expect(apiId).to.eql(pm.environment.get(\"api_2_id\"));",
									"});",
									"",
									"// Assert the description",
									"pm.test(\"Revision created with the description\", function () {",
									"    pm.expect(revisionCreationResponseJson.description).to.eql(\"Initial Revision\");",
									"});",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"revision_2_id\", revisionCreationResponseJson.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Initial Revision\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_2_id}}/revisions",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_2_id}}",
								"revisions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deploy API Revision for New Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API revision deployment\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// API creation response JSON",
									"var revisionDeploymentResponseJson = pm.response.json();",
									"",
									"// Assert the revision ID",
									"pm.test(\"Revision deployed for the API\", function () {",
									"    pm.expect(revisionDeploymentResponseJson[0].revisionUuid).to.eql(pm.environment.get(\"revision_2_id\"));",
									"});",
									"",
									"setTimeout(function(){}, pm.environment.get(\"wait_time_for_deployment\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"Default\",\n        \"displayOnDevportal\": true,\n        \"vhost\": \"{{gateway_host}}\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_2_id}}/deploy-revision?revisionId={{revision_2_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_2_id}}",
								"deploy-revision"
							],
							"query": [
								{
									"key": "revisionId",
									"value": "{{revision_2_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish New Version of API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Publish the API with schema validation\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/change-lifecycle?action=Publish&apiId={{api_2_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"change-lifecycle"
							],
							"query": [
								{
									"key": "action",
									"value": "Publish"
								},
								{
									"key": "apiId",
									"value": "{{api_2_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Application creation\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Application creation response JSON",
									"var appCreationResponseJson = pm.response.json();",
									"",
									"var applicationId = appCreationResponseJson.applicationId;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"application_id\", applicationId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PizzaShackApp\",\n  \"throttlingPolicy\": \"Unlimited\",\n  \"description\": \"\",\n  \"tokenType\": \"JWT\",\n  \"groups\": null,\n  \"attributes\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Subscription to the API\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"applicationId\": \"{{application_id}}\",\n  \"apiId\": \"{{api_id}}\",\n  \"throttlingPolicy\": \"Unlimited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/subscriptions",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Subscription for New Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Subscription to the API\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"applicationId\": \"{{application_id}}\",\n  \"apiId\": \"{{api_2_id}}\",\n  \"throttlingPolicy\": \"Unlimited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/subscriptions",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Key Manager for Key Generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Retrieve keymanager to generate keys\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Keymanager retrieval response JSON",
									"var keymanagerArrayJsonResponse = pm.response.json();",
									"",
									"var keymanagerId = keymanagerArrayJsonResponse.list[0].id;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"keymanager_id\", keymanagerId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/key-managers",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"key-managers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Keys for Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Generate keys for the application\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Key generation response JSON",
									"var keyGenerationResponseJson = pm.response.json();",
									"",
									"var keyMappingId = keyGenerationResponseJson.keyMappingId;",
									"var appConsumerSecret = keyGenerationResponseJson.consumerSecret;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"key_mapping_id\", keyMappingId);",
									"pm.environment.set(\"app_consumer_secret\", appConsumerSecret);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"keyType\": \"PRODUCTION\",\n  \"grantTypesToBeSupported\": [\n    \"password\",\n    \"client_credentials\"\n  ],\n  \"callbackUrl\": \"\",\n  \"additionalProperties\": {\n    \"application_access_token_expiry_time\": \"N/A\",\n    \"user_access_token_expiry_time\": \"N/A\",\n    \"refresh_token_expiry_time\": \"N/A\",\n    \"id_token_expiry_time\": \"N/A\",\n    \"pkceMandatory\": \"false\",\n    \"pkceSupportPlain\": \"false\",\n    \"bypassClientCredentials\": \"false\"\n  },\n  \"keyManager\": \"{{keymanager_id}}\",\n  \"validityTime\": 3600,\n  \"scopes\": [\n    \"default\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}/generate-keys",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{application_id}}",
								"generate-keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Access Token for Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Generate access token to invoke APIs\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Access token response JSON",
									"var accessTokenResponseJson = pm.response.json();",
									"",
									"var appAccessToken = accessTokenResponseJson.accessToken;",
									"",
									"// Set the environment variables",
									"pm.environment.set(\"app_access_token\", appAccessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"consumerSecret\": \"{{app_consumer_secret}}\",\n  \"validityPeriod\": 3600,\n  \"revokeToken\": null,\n  \"scopes\": [],\n  \"additionalProperties\": {\n    \"id_token_expiry_time\": 3600,\n    \"application_access_token_expiry_time\": 3600,\n    \"user_access_token_expiry_time\": 3600,\n    \"bypassClientCredentials\": false,\n    \"pkceMandatory\": false,\n    \"pkceSupportPlain\": false,\n    \"refresh_token_expiry_time\": 86400\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}/oauth-keys/{{key_mapping_id}}/generate-token",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{application_id}}",
								"oauth-keys",
								"{{key_mapping_id}}",
								"generate-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoke API with Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API invocation with version in the URL\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{gateway_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{gateway_port}}/pizzashack/1.0.0/menu",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{gateway_port}}",
							"path": [
								"pizzashack",
								"1.0.0",
								"menu"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoke API with New Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API invocation with version in the URL\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{gateway_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{gateway_port}}/pizzashack/2.0.0/menu",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{gateway_port}}",
							"path": [
								"pizzashack",
								"2.0.0",
								"menu"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoke API with Default Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API invocation without version (default version) in the URL\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "{{gateway_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{gateway_port}}/pizzashack/menu",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{gateway_port}}",
							"path": [
								"pizzashack",
								"menu"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"Application deletion\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{devportal_base_path}}/applications/{{application_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{devportal_base_path}}",
							"path": [
								"applications",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API deletion\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete New Version of API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert the response code",
									"pm.test(\"API deletion\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dcr_app_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Host",
								"value": "{{portals_host}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{cluster_ip}}:{{portals_port}}{{publisher_base_path}}/apis/{{api_2_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{cluster_ip}}"
							],
							"port": "{{portals_port}}{{publisher_base_path}}",
							"path": [
								"apis",
								"{{api_2_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}